{"version":3,"sources":["queries/queries.js","components/BookDetails.jsx","components/BookList.jsx","components/AddBook.jsx","App.jsx","serviceWorker.js","index.js"],"names":["getBooksQuery","gql","_templateObject","getAuthorsQuery","_templateObject2","addBookMutation","_templateObject3","getBookQuery","_templateObject4","BookDetails","book","this","props","data","react_default","a","createElement","name","genre","author","className","books","map","item","key","id","displayBookDetails","Component","graphql","options","variables","bookId","BookList","state","selected","_this2","loading","onClick","e","setState","displayBooks","components_BookDetails","AddBook","authorId","submitForm","preventDefault","_this$state","_this","refetchQueries","query","disabled","authors","value","onSubmit","type","onChange","target","displayAuthors","compose","client","ApolloClient","uri","App","react_apollo_browser_umd","components_BookList","components_AddBook","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b1fea263.chunk.js","sourcesContent":["import { gql } from \"apollo-boost\";\n\nconst getBooksQuery = gql`\n  {\n    books {\n      name\n      id\n    }\n  }\n`;\n\nconst getAuthorsQuery = gql`\n  {\n    authors {\n      name\n      id\n    }\n  }\n`;\n\nconst addBookMutation = gql`\n  mutation($name: String!, $genre: String!, $authorId: ID!) {\n    addBook(name: $name, genre: $genre, authorId: $authorId) {\n      name\n      id\n    }\n  }\n`;\n\nconst getBookQuery = gql`\n  query($id: ID) {\n    book(id: $id) {\n      id\n      name\n      genre\n      author {\n        id\n        name\n        age\n        books {\n          name\n          id\n        }\n      }\n    }\n  }\n`;\n\nexport { getAuthorsQuery, getBooksQuery, addBookMutation, getBookQuery };\n","import React, { Component } from \"react\";\nimport { graphql } from \"react-apollo\";\nimport { getBookQuery } from \"../queries/queries\";\n\nclass BookDetails extends Component {\n  displayBookDetails() {\n    const { book } = this.props.data;\n    if (book) {\n      return (\n        <div>\n          <h2>{book.name}</h2>\n          <p>{book.genre}</p>\n          <p>{book.author.name}</p>\n          <p>All books by this author:</p>\n          <ul className=\"other-books\">\n            {book.author.books.map(item => {\n              return <li key={item.id}>{item.name}</li>;\n            })}\n          </ul>\n        </div>\n      );\n    } else {\n      return <h3>No book selected...</h3>;\n    }\n  }\n\n  render() {\n    return <div id=\"book-details\">{this.displayBookDetails()}</div>;\n  }\n}\n\nexport default graphql(getBookQuery, {\n  options: props => {\n    return {\n      variables: {\n        id: props.bookId\n      }\n    };\n  }\n})(BookDetails);\n","import React, { Component } from \"react\";\nimport { graphql } from \"react-apollo\";\nimport { getBooksQuery } from \"../queries/queries\";\n\nimport BookDetails from \"./BookDetails\";\n\nclass BookList extends Component {\n  state = {\n    selected: null\n  };\n  displayBooks() {\n    const data = this.props.data;\n    if (data.loading) {\n      return <div>Loading books...</div>;\n    } else {\n      return data.books.map(book => {\n        return (\n          <li\n            key={book.id}\n            onClick={e => {\n              this.setState({ selected: book.id });\n            }}\n          >\n            {book.name}\n          </li>\n        );\n      });\n    }\n  }\n  render() {\n    return (\n      <div>\n        <ul id=\"book-list\">{this.displayBooks()}</ul>\n        <BookDetails bookId={this.state.selected} />\n      </div>\n    );\n  }\n}\n\nexport default graphql(getBooksQuery)(BookList);\n","import React, { Component } from \"react\";\nimport { graphql, compose } from \"react-apollo\";\nimport {\n  getAuthorsQuery,\n  addBookMutation,\n  getBooksQuery\n} from \"../queries/queries\";\n\nclass AddBook extends Component {\n  state = {\n    name: \"\",\n    genre: \"\",\n    authorId: \"\"\n  };\n\n  displayAuthors() {\n    const data = this.props.getAuthorsQuery;\n    if (data.loading) {\n      return <option disabled>Loading authors...</option>;\n    } else {\n      return data.authors.map(author => {\n        return (\n          <option key={author.id} value={author.id}>\n            {author.name}\n          </option>\n        );\n      });\n    }\n  }\n\n  submitForm = e => {\n    e.preventDefault();\n    const { name, genre, authorId } = this.state;\n    this.props.addBookMutation({\n      variables: {\n        name,\n        genre,\n        authorId\n      },\n      refetchQueries: [{ query: getBooksQuery }]\n    });\n  };\n\n  render() {\n    return (\n      <form id=\"add-book\" onSubmit={this.submitForm}>\n        <div className=\"field\">\n          <label>Book name:</label>\n          <input\n            type=\"text\"\n            onChange={e => this.setState({ name: e.target.value })}\n          />\n        </div>\n\n        <div className=\"field\">\n          <label>Genre:</label>\n          <input\n            type=\"text\"\n            onChange={e => this.setState({ genre: e.target.value })}\n          />\n        </div>\n\n        <div className=\"field\">\n          <label>Author:</label>\n          <select onChange={e => this.setState({ authorId: e.target.value })}>\n            <option value=\"\">Select author</option>\n            {this.displayAuthors()}\n          </select>\n        </div>\n        <button>+</button>\n      </form>\n    );\n  }\n}\n\nexport default compose(\n  graphql(getAuthorsQuery, { name: \"getAuthorsQuery\" }),\n  graphql(addBookMutation, { name: \"addBookMutation\" })\n)(AddBook);\n","import React, { Component } from \"react\";\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"react-apollo\";\n\nimport BookList from \"./components/BookList\";\nimport AddBook from \"./components/AddBook\";\n\n// apollo client setup\nconst client = new ApolloClient({\n  uri: \"/graphql\"\n});\n\nclass App extends Component {\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        <div id=\"main\">\n          <h1>Reading List</h1>\n          <BookList />\n          <AddBook />\n        </div>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}